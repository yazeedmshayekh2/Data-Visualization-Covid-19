install.packages("dplyr")
install.packages("dplyr")
# Load necessary libraries
if (!requireNamespace("GGally", quietly = TRUE)) install.packages("GGally")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(GGally)
library(dplyr)
# Load the iris dataset
data("iris")
# Since GGally's ggparcoord function expects numerical data,
# convert the Species column into a numeric factor
iris$Species <- as.numeric(factor(iris$Species))
# Prepare the data by scaling the variables (optional but recommended)
iris_scaled <- as.data.frame(scale(iris[, 1:4]))
iris_scaled$Species <- iris$Species
# Create the parallel sets plot
ggparcoord(data = iris_scaled,
columns = 1:5, # Specify the columns to include in the plot
groupColumn = 5, # Use the species as the grouping variable
showPoints = TRUE, # Optionally, show data points
title = "Parallel Coordinates Plot for the Iris Dataset") +
scale_color_discrete(name = "Species", labels = c("Setosa", "Versicolor", "Virginica"))
# Load necessary libraries
if (!requireNamespace("GGally", quietly = TRUE)) install.packages("GGally")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(GGally)
library(dplyr)
# Load the iris dataset
data("iris")
# The GGally package's ggparcoord function allows for the use of non-numeric grouping variables,
# so we can use Species as is for the groupColumn argument.
# Optionally, scale the numeric columns (1:4) to have the same scale
iris_scaled <- iris %>%
mutate_at(vars(-Species), scale) %>%
mutate(Species = as.factor(Species)) # Ensure Species is treated as a factor
# Create the parallel sets plot
ggparcoord(data = iris_scaled,
columns = 1:4, # Specify the numeric columns to include in the plot
groupColumn = "Species", # Use the species as the grouping variable
showPoints = TRUE, # Optionally, show data points
title = "Parallel Coordinates Plot for the Iris Dataset") +
scale_color_discrete(name = "Species") # Use default color mapping for Species
setwd("C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project")
setwd("C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project/COVID-19-dashboard")
library(shiny)
library(shinydashboard)
ui_timeSeriesPlotPage_Ordinary <- function(id) {
ns <- NS(id)
tagList(
tags$style(HTML("
.tabbable > .nav > li > a                  {background-color: aqua;  color:black}
.tabbable > .nav > li[class=active]    > a {background-color: black; color:white}
")),
tabsetPanel(
tabPanel(
"Confirmed",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_confirmed_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumConfirmed_country"))
)
),
tabPanel(
"Death",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_death_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumDeath_country"))
)
),
tabPanel(
"Recovered",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_recovered_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSerisPlt_cumRecovered_country"))
)
)
)
)
}
ui_timeSeriesPlotPage_Proportion <- function(id) {
ns <- NS(id)
tagList(
tags$style(HTML("
.tabbable > .nav > li > a                  {background-color: aqua;  color:black}
.tabbable > .nav > li[class=active]    > a {background-color: black; color:white}
")),
tabsetPanel(
tabPanel(
"Confirmed",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_confirmed_prop_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumConfirmed_prop_country"))
)
),
tabPanel(
"Death",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_death_prop_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumDeath_prop_country"))
)
)
)
)
}
server_timeSeriesPlotPage_Ordinary <- function(input, output, session, data) {
data_prop <- compute_proportion(data, pop = data$Population, n = 1e6)
data_prop <- compute_cum_ranks(data_prop)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_country",
data = data,
var2show = "Cases", "confirmed_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_country",
data = data,
var2show = "cum_cases", "cumConfirmed_country", FALSE, n = 1, showLog = TRUE
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_country",
data = data,
var2show = "Deaths", "death_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_country",
data = data,
var2show = "cum_death", "ordcum_death", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_recovered_country",
data = data,
var2show = "Recovered", "cumDeath_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSerisPlt_cumRecovered_country",
data = data,
var2show = "cum_recovered", "cumRecovered_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_prop_country",
data = data_prop,
var2show = "Cases", "confirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_prop_country",
data = data_prop,
var2show = "cum_cases", "cumConfirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_prop_country",
data = data_prop,
var2show = "Deaths", "death_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_prop_country",
data = data_prop,
var2show = "cum_death", "cumDeath_prop_country", TRUE, n = 1
)
}
server_timeSeriesPlotPage_Proportion <- function(input, output, session, data) {
data_prop <- compute_proportion(data, data$Population, n = 1e6)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_prop_country",
data = data_prop,
var2show = "Cases", "confirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_prop_country",
data = data_prop,
var2show = "cum_cases", "cumConfirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_prop_country",
data = data_prop,
var2show = "Deaths", "death_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_prop_country",
data = data_prop,
var2show = "cum_death", "cumDeath_prop_country", TRUE, n = 1
)
}
ui_timPage <- function(id) {
ns <- NS(id)
tagList(
radioGroupButtons(ns("Ord_prop"),
choices = c("Absolute counts", "Relative counts"), justified = TRUE, selected = "Absolute counts", status = "primary"
),
conditionalPanel("input.Ord_prop == 'Absolute counts'",
ns = ns,
h2("Absolute counts"),
ui_timeSeriesPlotPage_Ordinary(ns("Ordinary"))
),
conditionalPanel("input.Ord_prop == 'Relative counts'",
ns = ns,
h2("Relative counts"),
ui_timeSeriesPlotPage_Proportion(ns("Proportion"))
)
)
}
server_timPage <- function(input, output, session, data) {
callModule(server_timeSeriesPlotPage_Ordinary, "Ordinary", data)
callModule(server_timeSeriesPlotPage_Proportion, "Proportion", data)
}
ui <- dashboardPage(header = dashboardHeader(), sidebar = dashboardSidebar(), dashboardBody(
ui_timPage("f_1")
))
# time serice visualization:
library(plotly)
library(dplyr)
library(shiny)
library(RColorBrewer)
library(shinycssloaders)
library(shinysky)
library(shinyWidgets)
f_labels <- function(x) {
switch(x,
"Cases" = return("New cases"),
"cum_cases" = return("Cumulative confirmed cases"),
"Deaths" = return("New deaths"),
"cum_death" = return("Cumulative deaths"),
"Recovered" = return("New recovereis"),
"cum_recovered" = return("Cumulative recoveries")
)
}
ui_timeSeriesPlot <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("inp"), label = "Add/Remove regions", choices = c(1, 2), multiple = TRUE),
flowLayout(
prettyCheckbox(ns("help"), label = "Hint", value = FALSE),
uiOutput(ns("log2show")),
uiOutput(ns("regression2show"))
),
conditionalPanel("input.help",
ns = ns,
HTML("<p style = 'color:blue;font-size = 30px;font-weight:bold'>
You can add different regions to the graph by typing the name of the region in the search bar above and then pressing enter. Remove a region by clicking on the its name and pressing the backspace key. If you click on a specific curve, more statistical details appear below for the corresponding region.
</p>")
),
withSpinner(uiOutput(ns("uiplt")), type = 4),
uiOutput(ns("pl"))
)
}
server_timeSeriesPlot <- function(input, output, session, data, var2show, source = NULL, showLABEL = TRUE, n = NULL, showLog = FALSE) {
if (is.null(n)) n <- 1
if (is.null(source)) source <- "A"
ns <- session$ns
co <- reactive({
switch(var2show,
"Cases" = ntop_data(data, n, "case"),
"Deaths" = ntop_data(data, n, "death"),
"Recovered" = ntop_data(data, n, "recovered"),
"cum_cases" = ntop_data(data, n, "case"),
"cum_death" = ntop_data(data, n, "death"),
"cum_recovered" = ntop_data(data, n, "recovered"),
"date_case" = ntop_data(data, n, "date_case"),
"date_death" = ntop_data(data, n, "date_death")
)
})
observe({
updateSelectInput(session = session, inputId = "inp", choices = unique(data$Countries), selected = co()$Countries)
})
country <- reactive(input$inp)
new_data1 <- reactive({
data %>%
filter(Countries %in% country())
})
output$log2show <- renderUI({
if (stringr::str_starts(var2show, "cum")) {
prettyCheckbox(inputId = ns("Log"), label = "Logarithmic scale", value = FALSE)
}
})
output$uiplt <- renderUI(
tagList(
conditionalPanel("!input.regression",
plotlyOutput(ns("plt")),
ns = ns
),
conditionalPanel("input.regression",
flowLayout(
numericInput(ns("upper"), "Number of days to be forecasted", min = 1, max = 100, value = 60),
numericInput(ns("step"), "Step of the x axis", min = 1, max = 50, value = 10),
prettyCheckbox(ns("conf"), "Add 95% confidence interval", value = FALSE),
radioGroupButtons(ns("modell"), choices = list(
"Logistic" = TRUE,
"Gompertz" = FALSE
), selected = TRUE)
),
plotlyOutput(ns("regplt")),
ns = ns
)
)
)
output$plt <- renderPlotly({
new_data1() %>%
select(DateRep, var2show, Countries) %>%
mutate(Countries = factor(Countries, labels = unique(Countries))) %>%
plot_ly(
x = ~DateRep, y = ~ get(var2show), color = ~Countries,
colors = "Dark2", no.white = TRUE, steps = 2, customdata = ~Countries, source = source
) %>%
add_lines(marker = list(size = 6)) %>%
layout(yaxis = list(title = f_labels(var2show), type = ifelse(input$Log, "log", "linear")), xaxis = list(title = "Date reported"))
})
new_data2 <- reactiveVal()
observeEvent(event_data("plotly_click", source = source), {
df <- data %>%
filter(Countries %in% event_data("plotly_click", source = source)$customdata)
new_data2(df)
})
output$pl <- renderUI(
ui_Country_property(ns("f_1"))
)
observeEvent(event_data("plotly_click", source = source), callModule(server_Country_property, "f_1", new_data2, var2show, showLABEL = showLABEL, Log = input$Log))
#-----------------------
# regression:
#-----------------------
output$regression2show <- renderUI({
if (stringr::str_starts(var2show, "cum") && showLog) {
prettyCheckbox(
ns("regression"),
label = div(
style = "font-size: 16px;color:purple;font-weight:bold",
"Prediction of the future"
),
value = FALSE
)
}
})
output$regplt <- renderPlotly({
LGM_plot(data = data, Region_name = country(), upper = input$upper, conf = input$conf, Step = input$step, Log = input$Log, modell = input$modell)
# LGM(new_data1()$cum_cases, new_data1()$DateRep, unique(new_data1()$Countries), upper = input$upper, conf = input$conf, Step = input$step,Log = input$Log)
})
}
library(shiny)
library(shinydashboard)
ui_timeSeriesPlotPage_Ordinary <- function(id) {
ns <- NS(id)
tagList(
tags$style(HTML("
.tabbable > .nav > li > a                  {background-color: aqua;  color:black}
.tabbable > .nav > li[class=active]    > a {background-color: black; color:white}
")),
tabsetPanel(
tabPanel(
"Confirmed",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_confirmed_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumConfirmed_country"))
)
),
tabPanel(
"Death",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_death_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumDeath_country"))
)
),
tabPanel(
"Recovered",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_recovered_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSerisPlt_cumRecovered_country"))
)
)
)
)
}
ui_timeSeriesPlotPage_Proportion <- function(id) {
ns <- NS(id)
tagList(
tags$style(HTML("
.tabbable > .nav > li > a                  {background-color: aqua;  color:black}
.tabbable > .nav > li[class=active]    > a {background-color: black; color:white}
")),
tabsetPanel(
tabPanel(
"Confirmed",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_confirmed_prop_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumConfirmed_prop_country"))
)
),
tabPanel(
"Death",
box(
title = "New Cases (during the past 24 hours)", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_death_prop_country"))
),
box(
title = "Cumulative", status = "warning", solidHeader = TRUE, closable = FALSE, collapsible = TRUE, collapsed = FALSE, width = 12,
ui_timeSeriesPlot(ns("timeSeriesPlt_cumDeath_prop_country"))
)
)
)
)
}
server_timeSeriesPlotPage_Ordinary <- function(input, output, session, data) {
data_prop <- compute_proportion(data, pop = data$Population, n = 1e6)
data_prop <- compute_cum_ranks(data_prop)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_country",
data = data,
var2show = "Cases", "confirmed_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_country",
data = data,
var2show = "cum_cases", "cumConfirmed_country", FALSE, n = 1, showLog = TRUE
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_country",
data = data,
var2show = "Deaths", "death_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_country",
data = data,
var2show = "cum_death", "ordcum_death", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_recovered_country",
data = data,
var2show = "Recovered", "cumDeath_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSerisPlt_cumRecovered_country",
data = data,
var2show = "cum_recovered", "cumRecovered_country", FALSE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_prop_country",
data = data_prop,
var2show = "Cases", "confirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_prop_country",
data = data_prop,
var2show = "cum_cases", "cumConfirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_prop_country",
data = data_prop,
var2show = "Deaths", "death_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_prop_country",
data = data_prop,
var2show = "cum_death", "cumDeath_prop_country", TRUE, n = 1
)
}
server_timeSeriesPlotPage_Proportion <- function(input, output, session, data) {
data_prop <- compute_proportion(data, data$Population, n = 1e6)
callModule(server_timeSeriesPlot, "timeSeriesPlt_confirmed_prop_country",
data = data_prop,
var2show = "Cases", "confirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumConfirmed_prop_country",
data = data_prop,
var2show = "cum_cases", "cumConfirmed_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_death_prop_country",
data = data_prop,
var2show = "Deaths", "death_prop_country", TRUE, n = 1
)
callModule(server_timeSeriesPlot, "timeSeriesPlt_cumDeath_prop_country",
data = data_prop,
var2show = "cum_death", "cumDeath_prop_country", TRUE, n = 1
)
}
ui_timPage <- function(id) {
ns <- NS(id)
tagList(
radioGroupButtons(ns("Ord_prop"),
choices = c("Absolute counts", "Relative counts"), justified = TRUE, selected = "Absolute counts", status = "primary"
),
conditionalPanel("input.Ord_prop == 'Absolute counts'",
ns = ns,
h2("Absolute counts"),
ui_timeSeriesPlotPage_Ordinary(ns("Ordinary"))
),
conditionalPanel("input.Ord_prop == 'Relative counts'",
ns = ns,
h2("Relative counts"),
ui_timeSeriesPlotPage_Proportion(ns("Proportion"))
)
)
}
server_timPage <- function(input, output, session, data) {
callModule(server_timeSeriesPlotPage_Ordinary, "Ordinary", data)
callModule(server_timeSeriesPlotPage_Proportion, "Proportion", data)
}
ui <- dashboardPage(header = dashboardHeader(), sidebar = dashboardSidebar(), dashboardBody(
ui_timPage("f_1")
))
server <- function(input, output) {
data <- DataDownload()
callModule(server_timPage, "f_1", data)
}
shinyApp(ui, server)
runApp()
