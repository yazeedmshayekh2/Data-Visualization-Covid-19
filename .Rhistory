})
f4 <- Vectorize(function(x) {
xx <- unlist(strsplit(x, split = "-"))
if (nchar(xx[2]) < 2) {
xx[2] <- paste0("0", xx[2])
}
if (nchar(xx[3]) < 2) {
xx[3] <- paste0("0", xx[3])
}
as.numeric(paste0(xx, collapse = ""))
})
data3$DateRep <- f3(data3$DateRep)
data3$DateRep <- reorder(data3$DateRep, f4(data3$DateRep))
names(data3$DateRep) <- NULL
###
# adding world data
data <- data3 %>%
group_by(DateRep) %>%
tidyr::nest()
f_world <- function(x) {
xnew <- x %>%
summarise(
Cases = sum(Cases), Deaths = sum(Deaths), Recovered = sum(Recovered),
Countries = "World", cum_cases = sum(cum_cases), cum_death = sum(cum_death),
cum_recovered = sum(cum_recovered)
)
rbind(x, xnew)
}
data$data <- lapply(data$data, f_world)
data <- tidyr::unnest(data)
### adding population Data:
pop <- fread("Modules/population.csv")
pop <- tibble::add_row(pop, Countries = "World", Population = sum(pop$Population))
pop$Countries <- f_Country_wrangling(pop$Countries)
pop <- pop[, c("Countries", "Population")]
res <- inner_join(data, pop, by = "Countries")
res <- ungroup(res)
res$Countries <- factor(res$Countries, levels = unique(res$Countries), labels = unique(res$Countries))
return(res)
}
library(stringr)
f_Country_wrangling <- Vectorize(function(x) {
f <- function(x) {
x_spl <- unlist(strsplit(x, ""))
if ("*" %in% x_spl) {
nx <- which(x_spl %in% "*")
paste0(x_spl[-nx], collapse = "")
} else {
return(x)
}
}
res <- f(x) %>%
str_replace_all(" ", "_") %>%
str_replace_all("-", "_")
res[which(res == "US")] <- "USA"
res[which(res == "United_Stats_of_America")] <- "USA"
res[which(res == "U.S.")] <- "USA"
res[which(res == "United_States_of_America")] <- "USA"
res[which(res == "United_States")] <- "USA"
res[which(res == "U.K.")] <- "UK"
res[which(res == "United_Kingdom")] <- "UK"
res[which(res == "Korea,_South")] <- "South_Korea"
res[which(res == "Czechia")] <- "Czech_Republic"
res[which(res == "Czech_Republic_(Czechia)")] <- "Czech_Republic"
res[which(res == "Viet_Nam")] <- "Vietnam"
res[which(res == "St._Vincent_&_Grenadines")] <- "Saint_Vincent_and_the_Grenadines"
res[which(res == "Saint_Vincent")] <- "Saint_Vincent_and_the_Grenadines"
res[which(res == "Saint_Kitts")] <- "Saint_Kitts_and_Nevis"
res[which(res == "Saint_Kitts_&_Nevis")] <- "Saint_Kitts_and_Nevis"
res[which(res == "Côte_d'Ivoire")] <- "Ivory_Coast"
res[which(res == "Cote_d'Ivoire")] <- "Ivory_Coast"
res[which(res == "Cأ´te_d'Ivoire")] <- "Ivory_Coast"
res[which(res == "Côte_d'Ivoire")] <- "Ivory_Coast"
res[which(res == "Antigua_and_Barbuda")] <- "Barbuda"
res[which(res == "Cabo_Verde")] <- "Cape_Verde"
res[which(res == "Trinidad_and_Tobago")] <- "Tobago"
res[which(res == "Democratic_Republic_of_the_Congo")] <- "DR_Congo"
res[which(res == "Congo_(Kinshasa)")] <- "DR_Congo"
res[which(res == "Congo_(Brazzaville)")] <- "Congo"
res[which(res == "TFYR_Macedonia")] <- "North_Macedonia"
res[which(res == "West_Bank_and_Gaza Kosovo")] <- "State_of_Palestine"
res[which(res == "Burma")] <- "Myanmar"
res[which(res == "Eswatini")] <- "Swaziland"
res[which(res == "Iran_(Islamic_Republic_of)")] <- "Iran"
res[which(res == "Bolivia_(Plurinational_State_of)")] <- "Bolivia"
res[which(res == "Côte_d'Ivoire")] <- "Ivory_Coast"
res[which(res == "Brunei_Darussalam")] <- "Brunei"
res[which(res == "Russian_Federation")] <- "Russia"
res[which(res == "Taiwan,_Province_of_China")] <- "Taiwan"
res[which(res == "Moldova_(Republic_of)")] <- "Moldova"
res[which(res == "United_Kingdom_of_Great_Britain_and_Northern_Ireland")] <- "UK"
res[which(res == "Venezuela_(Bolivarian_Republic_of)")] <- "Venezuela"
res[which(res == "Syrian_Arab_Republic")] <- "Syria"
res[which(res == "Lao_People's_Democratic_Republic")] <- "Laos"
res[which(res == "Korea_(Republic_of)")] <- "South_Korea"
res[which(res == "Congo_(Democratic_Republic_of_the)")] <- "DR_Congo"
res[which(res == "Congo")] <- "Congo"
res[which(res == "Macedonia_(the_former_Yugoslav_Republic_of)")] <- "North_Macedonia"
res[which(res == "Tanzania,_United_Republic_of")] <- "Tanzania"
res[which(res == "Sao_Tome_&_Principe")] <- "Sao_Tome_and_Principe"
return(res)
})
compute_proportion <- function(data, pop, n = 1e6) {
f1 <- function(x, pop, n) {
round(x / (pop / 1e6), 2)
}
df <- data[which(sapply(data, is.numeric))]
df2 <- data[-which(sapply(data, is.numeric))]
dff <- df %>% select(-starts_with("Pop"), -starts_with("Rec"))
res <- sapply(dff, f1, pop = data$Population, n = n)
colnames(res) <- paste0(names(dff))
res <- as.data.frame(res)
res$Recovered <- ifelse(df$Cases != 0, df$Recovered / df$Cases, 0)
res2 <- cbind(df2, population = pop, res)
res2$cum_recovered <- ifelse(data$cum_cases == 0, 0, data$cum_recovered / data$cum_cases)
res2
}
# data wrangling
library(dplyr)
library(data.table)
library(tidyr)
compute_cum_ranks <- function(data) {
f_rank <- function(data) {
f1 <- function(x) {
frankv(x, order = , ties.method = "first")
}
df <- data[which(sapply(data, is.numeric))]
# df
df_name <- names(df)
#
new_df <- sapply(df, f1)
colnames(new_df) <- paste0("rank_", df_name)
data.frame(data, new_df)
}
data %>%
group_by(DateRep) %>%
tidyr::nest() -> data2
data2$data <- lapply(data2$data, f_rank)
data2 <- tidyr::unnest(data2)
data2 <- ungroup(data2)
return(data2)
}
runApp('Modules/leafletMap_Page.R')
# leaflet shows:
library(leaflet)
library(leaflet.providers)
library(ggmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(shiny)
library(sf)
library(rgeos)
library(shinycssloaders)
grow1 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.5 * grow1(x, k - 1))))
grow2 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.4 * grow2(x, k - 1))))
switch_labels <- function(x) {
switch(x,
"case" = return("Cumulative confirmed cases"),
"death" = return("Cumulative deaths"),
"recovered" = return("Cumulative recoveries")
)
}
ui_leafMap <- function(id) {
ns <- NS(id)
tagList(
withSpinner(leafletOutput(ns("leafMap"), height = 900), type = 4)
)
}
server_leafMap <- function(input, output, session, data, var2show = "case") {
ns <- session$ns
f_col <- function(x) {
switch(x,
"case" = return("purple"),
"death" = return("black"),
"recovered" = return("green")
)
}
f_cat <- function(x, type = "case") {
f1 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow1(10, 35)), labels = 0:35)) - 1
}
f2 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow2(3, 40)),
labels = 0:40
)) - 1
}
switch(type, # case , death recovered
"case" = f1(x$cum_cases),
"death" = f2(x$cum_death),
"recovered" = f1(x$cum_recovered)
)
}
world <- reactive(ne_countries(scale = "small", returnclass = "sf"))
data3 <- reactive({
leafMap_data(data, input$inp_slider)
})
data4 <- reactive({
leafMap_data(data, length(unique(data$DateRep)))
})
xl <- 1
LEAF <- reactive({
world() %>%
leaflet(options = leafletOptions(minZoom = 2, maxZoom = 4)) %>%
addTiles() %>%
addControl(html = tagList(
dropdownButton(
size = "xs", icon = icon("gear"), label = "Slider",
width = "300px", status = "warning", circle = F,
tooltip = TRUE,
sliderInput(ns("inp_slider"),
label = paste0("Day (", switch_labels(var2show), ")"),
min = 1, max = length(unique(data$DateRep)), step = 2,
value = length(unique(data$DateRep)), animate = TRUE
)
)
), position = "topleft") %>%
addMarkers(lng = 32.0162, lat = 35.8695, label = "Shahrood University of Technology", labelOptions = labelOptions(textsize = "15px")) %>%
setView(lng = 0, lat = 0, zoom = 2)
})
zoom <- reactive({
ifelse(is.null(input$leafMap_zoom), 2, input$leafMap_zoom)
})
center <- reactive({
if (is.null(input$leafMap_center)) {
c(179.462, -20.64275)
} else {
return(input$leafMap_center)
}
})
observeEvent(input$inp_slider, {
leafletProxy(ns("leafMap"), session = session, deferUntilFlush = T, data = data3()) %>%
clearShapes() %>%
removeControl("f_date") %>%
setView(
lng = center()$lng,
lat = center()$lat,
zoom = zoom()
) %>%
addCircles(data3()$long, data3()$lat,
weight = (f_cat(data3(), var2show) * 1.3),
label = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
popup = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
color = f_col(var2show), opacity = .6,
labelOptions = labelOptions(textsize = "20px")
) %>%
addControl(HTML(paste0(
"<p style = 'color:orange;font-size:23px;font-weight:bold'> Date: ",
unique(data$DateRep)[input$inp_slider], "</p>"
)),
layerId = "f_date",
position = "topright"
)
})
output$leafMap <- renderLeaflet({
LEAF()
})
}
runApp('Modules/leafletMap_Page.R')
# leaflet shows:
library(leaflet)
library(leaflet.providers)
library(ggmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(shiny)
library(sf)
library(rgeos)
library(shinycssloaders)
grow1 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.5 * grow1(x, k - 1))))
grow2 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.4 * grow2(x, k - 1))))
switch_labels <- function(x) {
switch(x,
"case" = return("Cumulative confirmed cases"),
"death" = return("Cumulative deaths"),
"recovered" = return("Cumulative recoveries")
)
}
ui_leafMap <- function(id) {
ns <- NS(id)
tagList(
withSpinner(leafletOutput(ns("leafMap"), height = 900), type = 4)
)
}
server_leafMap <- function(input, output, session, data, var2show = "case") {
ns <- session$ns
f_col <- function(x) {
switch(x,
"case" = return("purple"),
"death" = return("black"),
"recovered" = return("green")
)
}
f_cat <- function(x, type = "case") {
f1 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow1(10, 35)), labels = 0:35)) - 1
}
f2 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow2(3, 40)),
labels = 0:40
)) - 1
}
switch(type, # case , death recovered
"case" = f1(x$cum_cases),
"death" = f2(x$cum_death),
"recovered" = f1(x$cum_recovered)
)
}
world <- reactive(ne_countries(scale = "small", returnclass = "sf"))
data3 <- reactive({
leafMap_data(data, input$inp_slider)
})
data4 <- reactive({
leafMap_data(data, length(unique(data$DateRep)))
})
xl <- 1
LEAF <- reactive({
world() %>%
leaflet(options = leafletOptions(minZoom = 2, maxZoom = 4)) %>%
addTiles() %>%
addControl(html = tagList(
dropdownButton(
size = "xs", icon = icon("gear"), label = "Slider",
width = "300px", status = "warning", circle = F,
tooltip = TRUE,
sliderInput(ns("inp_slider"),
label = paste0("Day (", switch_labels(var2show), ")"),
min = 1, max = length(unique(data$DateRep)), step = 2,
value = length(unique(data$DateRep)), animate = TRUE
)
)
), position = "topleft") %>%
addMarkers(lng = 35.8695, lat = 32.0162, label = "Unviversity Of Jordan", labelOptions = labelOptions(textsize = "15px")) %>%
setView(lng = 0, lat = 0, zoom = 2)
})
zoom <- reactive({
ifelse(is.null(input$leafMap_zoom), 2, input$leafMap_zoom)
})
center <- reactive({
if (is.null(input$leafMap_center)) {
c(179.462, -20.64275)
} else {
return(input$leafMap_center)
}
})
observeEvent(input$inp_slider, {
leafletProxy(ns("leafMap"), session = session, deferUntilFlush = T, data = data3()) %>%
clearShapes() %>%
removeControl("f_date") %>%
setView(
lng = center()$lng,
lat = center()$lat,
zoom = zoom()
) %>%
addCircles(data3()$long, data3()$lat,
weight = (f_cat(data3(), var2show) * 1.3),
label = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
popup = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
color = f_col(var2show), opacity = .6,
labelOptions = labelOptions(textsize = "20px")
) %>%
addControl(HTML(paste0(
"<p style = 'color:orange;font-size:23px;font-weight:bold'> Date: ",
unique(data$DateRep)[input$inp_slider], "</p>"
)),
layerId = "f_date",
position = "topright"
)
})
output$leafMap <- renderLeaflet({
LEAF()
})
}
runApp('Modules/leafletMap_Page.R')
# leaflet shows:
library(leaflet)
library(leaflet.providers)
library(ggmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(shiny)
library(sf)
library(rgeos)
library(shinycssloaders)
grow1 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.5 * grow1(x, k - 1))))
grow2 <- function(x, k) ifelse(k == 1, return(x), return(c(x, 1.4 * grow2(x, k - 1))))
switch_labels <- function(x) {
switch(x,
"case" = return("Cumulative confirmed cases"),
"death" = return("Cumulative deaths"),
"recovered" = return("Cumulative recoveries")
)
}
ui_leafMap <- function(id) {
ns <- NS(id)
tagList(
withSpinner(leafletOutput(ns("leafMap"), height = 900), type = 4)
)
}
server_leafMap <- function(input, output, session, data, var2show = "case") {
ns <- session$ns
f_col <- function(x) {
switch(x,
"case" = return("purple"),
"death" = return("black"),
"recovered" = return("green")
)
}
f_cat <- function(x, type = "case") {
f1 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow1(10, 35)), labels = 0:35)) - 1
}
f2 <- function(x) {
as.numeric(cut(x, c(-0.1, 1.1, grow2(3, 40)),
labels = 0:40
)) - 1
}
switch(type, # case , death recovered
"case" = f1(x$cum_cases),
"death" = f2(x$cum_death),
"recovered" = f1(x$cum_recovered)
)
}
world <- reactive(ne_countries(scale = "small", returnclass = "sf"))
data3 <- reactive({
leafMap_data(data, input$inp_slider)
})
data4 <- reactive({
leafMap_data(data, length(unique(data$DateRep)))
})
xl <- 1
LEAF <- reactive({
world() %>%
leaflet(options = leafletOptions(minZoom = 2, maxZoom = 4)) %>%
addTiles() %>%
addControl(html = tagList(
dropdownButton(
size = "xs", icon = icon("gear"), label = "Slider",
width = "300px", status = "warning", circle = F,
tooltip = TRUE,
sliderInput(ns("inp_slider"),
label = paste0("Day (", switch_labels(var2show), ")"),
min = 1, max = length(unique(data$DateRep)), step = 2,
value = length(unique(data$DateRep)), animate = TRUE
)
)
), position = "topleft") %>%
addMarkers(lng = 35.869577783457586, lat = 32.0162321313847, label = "Unviversity Of Jordan", labelOptions = labelOptions(textsize = "15px")) %>%
setView(lng = 0, lat = 0, zoom = 2)
})
zoom <- reactive({
ifelse(is.null(input$leafMap_zoom), 2, input$leafMap_zoom)
})
center <- reactive({
if (is.null(input$leafMap_center)) {
c(179.462, -20.64275)
} else {
return(input$leafMap_center)
}
})
observeEvent(input$inp_slider, {
leafletProxy(ns("leafMap"), session = session, deferUntilFlush = T, data = data3()) %>%
clearShapes() %>%
removeControl("f_date") %>%
setView(
lng = center()$lng,
lat = center()$lat,
zoom = zoom()
) %>%
addCircles(data3()$long, data3()$lat,
weight = (f_cat(data3(), var2show) * 1.3),
label = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
popup = paste0(
data3()$Countries, ":\n", "Confirmed: ",
data3()$cum_cases, ",\n", "Death: ", data3()$cum_death, ",\n", "Recovered: ",
round(data3()$cum_recovered, 2)
),
color = f_col(var2show), opacity = .6,
labelOptions = labelOptions(textsize = "20px")
) %>%
addControl(HTML(paste0(
"<p style = 'color:orange;font-size:23px;font-weight:bold'> Date: ",
unique(data$DateRep)[input$inp_slider], "</p>"
)),
layerId = "f_date",
position = "topright"
)
})
output$leafMap <- renderLeaflet({
LEAF()
})
}
runApp('Modules/leafletMap_Page.R')
