# Treemap for Sepal Width by Species
treemap(iris,
index="Species",
vSize="Sepal.Width",
vColor="Sepal.Width",
title="Treemap of Sepal Width by Species",
palette="RdYlGn",
border.col="white",
border.lwds=0.5)
# Treemap for Petal Length by Species
treemap(iris,
index="Species",
vSize="Petal.Length",
vColor="Petal.Length",
title="Treemap of Petal Length by Species",
palette="RdYlGn",
border.col="white",
border.lwds=0.5)
# Treemap for Petal Width by Species
treemap(iris,
index="Species",
vSize="Petal.Width",
vColor="Petal.Width",
title="Treemap of Petal Width by Species",
palette="RdYlGn",
border.col="white",
border.lwds=0.5)
# Create a treemap
treemap(iris,
index="Species",
vSize="Sepal.Length",
vColor="Sepal.Width",
title="Distribution of Sepal Length and Width by Species",
palette="RdYlGn",
border.col="white",
border.lwds=0.5)
plot_data <- iris %>%
group_by(PetalWidthCategory, Species) %>%
summarise(Count = n(), .groups = 'drop')
plot_data <- iris %>%
group_by(PetalWidthCategory, Species) %>%
summarise(Count = n(), .groups = 'drop')
ggplot(plot_data, aes(x = "", y = Count, fill = Species)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
facet_wrap(~PetalWidthCategory) +
theme_void() +
theme(legend.title = element_blank()) +
labs(fill = "Species", title = "Distribution of Species by Petal Width Categories")
data(iris)
mosaic(~ Species + SepalWidthCat, data=iris)
iris$SepalWidthCat <- cut(iris$Sepal.Width, breaks=quantile(iris$Sepal.Width, probs=0:3/3), include.lowest=TRUE, labels=c("Narrow", "Medium", "Wide")),  mosaic(~ Species + SepalWidthCat, data=iris)
iris$SepalWidthCat <- cut(iris$Sepal.Width, breaks=quantile(iris$Sepal.Width, probs=0:3/3), include.lowest=TRUE, labels=c("Narrow", "Medium", "Wide"))  mosaic(~ Species + SepalWidthCat, data=iris)
iris$SepalWidthCat <- cut(iris$Sepal.Width, breaks=quantile(iris$Sepal.Width, probs=0:3/3), include.lowest=TRUE, labels=c("Narrow", "Medium", "Wide")) mosaic(~ Species + SepalWidthCat, data=iris)
iris$SepalWidthCat <- cut(iris$Sepal.Width, breaks=quantile(iris$Sepal.Width, probs=0:3/3), include.lowest=TRUE, labels=c("Narrow", "Medium", "Wide")) + mosaic(~ Species + SepalWidthCat, data=iris)
iris$SepalWidthCat <- cut(iris$Sepal.Width, breaks=quantile(iris$Sepal.Width, probs=0:3/3), include.lowest=TRUE, labels=c("Narrow", "Medium", "Wide"))
mosaic(~ Species + SepalWidthCat, data=iris)
library('treemap')
library(treemap)
library(ggplot2)
library(plotly)
# Categorize Petal.Width into bins
iris$PetalWidthCat <- cut(iris$Petal.Width, breaks=c(-Inf, 1, 1.8, Inf), labels=c("Narrow", "Medium", "Wide"))
# Count the number of observations for each Species and PetalWidthCat
pie_data <- as.data.frame(table(iris$Species, iris$PetalWidthCat))
# Create nested pie chart
ggplot(pie_data, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
facet_wrap(~Var2) +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.title = element_blank())
iris$PetalWidthCat <- cut(iris$Petal.Width,
breaks = quantile(iris$Petal.Width, probs = 0:3/3),
include.lowest = TRUE,
labels = c("Narrow", "Medium", "Wide"))
# Count the number of observations for each Species and PetalWidthCat
iris_summary <- iris %>%
group_by(Species, PetalWidthCat) %>%
summarise(Count = n()) %>%
ungroup()
# Create a factor with the desired order for the pie pieces
iris_summary$Species <- factor(iris_summary$Species,
levels = c("setosa", "versicolor", "virginica"))
# Nested pie chart
ggplot(iris_summary, aes(x = 2, y = Count, fill = Species)) +
geom_bar(stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~PetalWidthCat) +
theme_void() +
theme(legend.position = "right")
# Load necessary libraries
install.packages("gridExtra") # If not already installed
library(gridExtra)
# Get unique values of Petal Width
petal_width_levels <- unique(iris$Petal.Width)
# Calculate proportion of Species within each Petal Width category
prop_table <- with(iris, table(Species, cut(Petal.Width, breaks = c(-Inf, pretty(Petal.Width)[2], Inf)), dnn = c('Species', 'Petal Width Category')) )
proportions <- prop.table(prop_table, margin = 1) * 100
# Create individual pie charts for each Petal Width category
pies <- lapply(seq_along(petal_width_levels), function(i){
plot_data <- proportions[,, i]
rownames(plot_data) <- NULL
labels <- row.names(plot_data)
pcts <- as.numeric(plot_data)
colors <- rainbow(3)[as.integer(factor(labels))]
pie(pcts, labels=labels, col=colors, main=paste('Petal Width Level:', petal_width_levels[i]))
})
# Get unique values of Petal Width
petal_width_levels <- unique(iris$Petal.Width)
# Calculate proportion of Species within each Petal Width category
prop_table <- with(iris, table(Species, cut(Petal.Width, breaks = c(-Inf, pretty(Petal.Width)[2], Inf)), dnn = c('Species', 'Petal Width Category')) )
proportions <- prop.table(prop_table, margin = 1) * 100
# Create individual pie charts for each Petal Width category
pies <- lapply(seq_along(petal_width_levels), function(i){
plot_data <- proportions[,, i]
rownames(plot_data) <- NULL
labels <- row.names(plot_data)
pcts <- as.numeric(plot_data)
colors <- rainbow(3)[as.integer(factor(labels))]
pie(pcts, labels=labels, col=colors, main=paste('Petal Width Level:', petal_width_levels[i]))
})
# Install and load plotly if it's not already installed
if(!require(plotly)) install.packages("plotly")
library(plotly)
# Categorize the petal width into bins
iris$PetalWidthCat <- cut(iris$Petal.Width,
breaks = quantile(iris$Petal.Width, probs = seq(0, 1, 0.25)),
include.lowest = TRUE)
# Create a data frame for the sunburst chart
sunburst_data <- iris %>%
group_by(Species, PetalWidthCat) %>%
summarise(Count = n(), .groups = 'drop') %>%
ungroup() %>%
mutate(All = "All") # This creates a root node for the chart
# Create the sunburst chart
fig <- plot_ly(sunburst_data, ids = ~paste(All, Species, PetalWidthCat, sep = "/"),
labels = ~PetalWidthCat, parents = ~paste(All, Species, sep = "/"),
values = ~Count, branchvalues = "total",
type = 'sunburst',
hoverinfo = 'label+percent parent+percent entry')
# Display the plot
fig
# Categorize the petal width into bins
iris$PetalWidthCat <- cut(iris$Petal.Width,
breaks = quantile(iris$Petal.Width, probs = seq(0, 1, 0.25)),
include.lowest = TRUE)
# Create a data frame for the sunburst chart
sunburst_data <- iris %>%
group_by(Species, PetalWidthCat) %>%
summarise(Count = n(), .groups = 'drop') %>%
ungroup() %>%
mutate(All = "All") # This creates a root node for the chart
# Create the sunburst chart
fig <- plot_ly(sunburst_data, ids = ~paste(All, Species, PetalWidthCat, sep = "/"),
labels = ~PetalWidthCat, parents = ~paste(All, Species, sep = "/"),
values = ~Count, branchvalues = "total",
type = 'sunburst',
hoverinfo = 'label+percent parent+percent entry')
fig
rpie <- 1
rpie1 <- 0
rpie2 <- 1
rlabel <- 1.02 * rpie
bridges_nested_pie2 <- ggplot() +
geom_arc_bar(data = bridges_pie_outer,
aes(
x0 = 0, y0 = 0, r0 = rpie1, r = rpie2,
start = start_angle, end = end_angle, fill = label
),
color = "white", size = 0.5
) +
geom_text(data = bridges_pie_outer,
aes(
x = rlabel*sin(mid_angle + angle_off),
y = rlabel*cos(mid_angle + angle_off),
label = label,
hjust = hjust, vjust = vjust
),
family = dviz_font_family,
size = 12/.pt
) +
geom_text(data = bridges_pie_outer,
aes(
x = 0.6*sin(mid_angle),
y = 0.6*cos(mid_angle),
label = count
),
color = c(rep("black", 8), "white"),
family = dviz_font_family,
size = 10/.pt,
hjust = 0.5, vjust = 0.5
) +
coord_fixed(clip = "off") +
scale_x_continuous(
limits = c(-1.5, 1.8), expand = c(0, 0), name = "", breaks = NULL, labels = NULL
) +
scale_y_continuous(
limits = c(-1.15, 1.15), expand = c(0, 0), name = "", breaks = NULL, labels = NULL
) +
scale_fill_manual(
values = c(
`crafts (wood)` = lighten("#009E73D0", .9),
`emerging (wood)` = lighten("#009E73D0", .6),
`mature (wood)` = lighten("#009E73D0", .3),
`crafts (iron)` = lighten("#D55E00D0", .9),
`emerging (iron)` = lighten("#D55E00D0", .6),
`mature (iron)` = lighten("#D55E00D0", .3),
`emerging (steel)` = lighten("#0072B2D0", .6),
`mature (steel)` = lighten("#0072B2D0", .3),
`modern (steel)` = "#0072B2D0"
)
) +
theme_dviz_map() +
theme(legend.position = "none")
# Categorize Petal.Width into bins
iris$PetalWidthCat <- cut(iris$Petal.Width, breaks=c(-Inf, 1, 1.8, Inf), labels=c("Narrow", "Medium", "Wide"))
# Count the number of observations for each Species and PetalWidthCat
pie_data <- as.data.frame(table(iris$Species, iris$PetalWidthCat))
# Create nested pie chart
ggplot(pie_data, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
facet_wrap(~Var2) +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.title = element_blank())
install.packages("parallelsets")
library(parallelsets)
library(parallel)
iris_ps <- parallelSets(iris, split = c("Species"))
ggplot(iris_ps, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_parallel_sets(aes(fill = Species)) +
geom_point(aes(size = Petal.Length)) +
geom_text(aes(label = Species), vjust = -0.5, hjust = 1) +
theme_minimal() +
labs(title = "Parallel Sets Plot of Iris Dataset",
x = "Sepal Length",
y = "Sepal Width",
color = "Species",
fill = "Species")
library(parallelSets)
library(parallelSets)
library(parallelsets)
select(bridges, MATERIAL, ERECTED, RIVER, LENGTH) %>%
filter(RIVER != "Y") %>%
table() %>%
reshape2::melt() %>%
rename(material = MATERIAL, erected = ERECTED, length = LENGTH, river = RIVER, count = value) %>%
mutate(
material = factor(
case_when(
material == "IRON" ~ "iron",
material == "STEEL" ~ "steel",
material == "WOOD" ~ "wood"
),
levels = c("wood", "steel", "iron")
),
erected = factor(
case_when(
erected == "CRAFTS" ~ "crafts",
erected == "EMERGING" ~ "emerging",
erected == "MATURE" ~ "mature",
erected == "MODERN" ~ "modern"
),
levels = c("modern", "mature", "emerging", "crafts")
),
length = factor(
case_when(
length == "LONG" ~ "long",
length == "MEDIUM" ~ "medium",
length == "SHORT" ~ "short"
),
levels = c("short", "medium", "long")
),
river = factor(
case_when(
river == "A" ~ "Allegheny",
river == "M" ~ "Monongahela",
river == "O" ~ "Ohio"
),
levels = c("Ohio", "Monongahela", "Allegheny")
)
) -> data
if (!requireNamespace("parsets", quietly = TRUE)) {
install.packages("parsets")
}
library(parsets)
if (!requireNamespace("ggparallel", quietly = TRUE)) {
install.packages("ggparallel")
}
library(ggparallel)
# Basic parallel sets plot
ggparallel(
names = names(iris)[1:4],  # Specify the columns for the parallel axes
data = iris,               # Data frame
method = "hammock",        # Method for parallel sets
aes(color = Species)       # Color by species
) +
theme_minimal()            # Use a minimal theme for a cleaner look
if (!requireNamespace("ggforce", quietly = TRUE)) {
install.packages("ggforce")
}
library(ggforce)
ggplot(iris, aes(colour = Species)) +
geom_parallel_sets(aes(x = 1, id = row_number()), alpha = 0.3) +
geom_parallel_sets_axes(aes(x = 1), size = 1) +
geom_parallel_sets_labels(color = 'black')
library(tidyr)
library(dplyr)
# Convert the dataset to a long format and discretize the numeric values
iris_long <- iris %>%
mutate(across(starts_with("Sepal"), ~cut(., breaks = 3, labels = c("Low", "Medium", "High"))),
across(starts_with("Petal"), ~cut(., breaks = 3, labels = c("Low", "Medium", "High")))) %>%
pivot_longer(cols = -Species, names_to = "Measurement", values_to = "Value")
library(ggplot2)
library(ggforce)
ggplot(iris_long, aes(axis1 = Measurement, axis2 = Value, group = Species)) +
geom_parallel_sets(aes(fill = Species), alpha = 0.5) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(size = 5) +
theme_minimal() +
labs(title = "Parallel Sets Plot of the Iris Dataset",
subtitle = "Showing relationships between Species and flower measurements",
x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyr)
library(dplyr)
# Convert the dataset to a long format and discretize the numeric values
iris_long <- iris %>%
mutate(across(starts_with("Sepal"), ~cut(., breaks = 3, labels = c("Low", "Medium", "High"))),
across(starts_with("Petal"), ~cut(., breaks = 3, labels = c("Low", "Medium", "High")))) %>%
pivot_longer(cols = -Species, names_to = "Measurement", values_to = "Value")
install.packages("GGally")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
# Load necessary libraries
if (!requireNamespace("GGally", quietly = TRUE)) install.packages("GGally")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(GGally)
library(dplyr)
# Load the iris dataset
data("iris")
# Since GGally's ggparcoord function expects numerical data,
# convert the Species column into a numeric factor
iris$Species <- as.numeric(factor(iris$Species))
# Prepare the data by scaling the variables (optional but recommended)
iris_scaled <- as.data.frame(scale(iris[, 1:4]))
iris_scaled$Species <- iris$Species
# Create the parallel sets plot
ggparcoord(data = iris_scaled,
columns = 1:5, # Specify the columns to include in the plot
groupColumn = 5, # Use the species as the grouping variable
showPoints = TRUE, # Optionally, show data points
title = "Parallel Coordinates Plot for the Iris Dataset") +
scale_color_discrete(name = "Species", labels = c("Setosa", "Versicolor", "Virginica"))
# Load necessary libraries
if (!requireNamespace("GGally", quietly = TRUE)) install.packages("GGally")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(GGally)
library(dplyr)
# Load the iris dataset
data("iris")
# The GGally package's ggparcoord function allows for the use of non-numeric grouping variables,
# so we can use Species as is for the groupColumn argument.
# Optionally, scale the numeric columns (1:4) to have the same scale
iris_scaled <- iris %>%
mutate_at(vars(-Species), scale) %>%
mutate(Species = as.factor(Species)) # Ensure Species is treated as a factor
# Create the parallel sets plot
ggparcoord(data = iris_scaled,
columns = 1:4, # Specify the numeric columns to include in the plot
groupColumn = "Species", # Use the species as the grouping variable
showPoints = TRUE, # Optionally, show data points
title = "Parallel Coordinates Plot for the Iris Dataset") +
scale_color_discrete(name = "Species") # Use default color mapping for Species
setwd("C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project/Data-Visualization-Covid-19")
shiny::runApp('Data-Visualization-Covid-19')
runApp('Data-Visualization-Covid-19')
# time serice visualization:
library(plotly)
library(dplyr)
library(shiny)
library(RColorBrewer)
library(shinycssloaders)
library(shinysky)
library(shinyWidgets)
f_labels <- function(x) {
switch(x,
"Cases" = return("New cases"),
"cum_cases" = return("Cumulative confirmed cases"),
"Deaths" = return("New deaths"),
"cum_death" = return("Cumulative deaths"),
"Recovered" = return("New recovereis"),
"cum_recovered" = return("Cumulative recoveries")
)
}
ui_timeSeriesPlot <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("inp"), label = "Add/Remove regions", choices = c(1, 2), multiple = TRUE),
flowLayout(
prettyCheckbox(ns("help"), label = "Hint", value = FALSE),
uiOutput(ns("log2show")),
uiOutput(ns("regression2show"))
),
conditionalPanel("input.help",
ns = ns,
HTML("<p style = 'color:blue;font-size = 30px;font-weight:bold'>
You can add different regions to the graph by typing the name of the region in the search bar above and then pressing enter. Remove a region by clicking on the its name and pressing the backspace key. If you click on a specific curve, more statistical details appear below for the corresponding region.
</p>")
),
withSpinner(uiOutput(ns("uiplt")), type = 4),
uiOutput(ns("pl"))
)
}
server_timeSeriesPlot <- function(input, output, session, data, var2show, source = NULL, showLABEL = TRUE, n = NULL, showLog = FALSE) {
if (is.null(n)) n <- 1
if (is.null(source)) source <- "A"
ns <- session$ns
co <- reactive({
switch(var2show,
"Cases" = ntop_data(data, n, "case"),
"Deaths" = ntop_data(data, n, "death"),
"Recovered" = ntop_data(data, n, "recovered"),
"cum_cases" = ntop_data(data, n, "case"),
"cum_death" = ntop_data(data, n, "death"),
"cum_recovered" = ntop_data(data, n, "recovered"),
"date_case" = ntop_data(data, n, "date_case"),
"date_death" = ntop_data(data, n, "date_death")
)
})
observe({
updateSelectInput(session = session, inputId = "inp", choices = unique(data$Countries), selected = co()$Countries)
})
country <- reactive(input$inp)
new_data1 <- reactive({
data %>%
filter(Countries %in% country())
})
output$log2show <- renderUI({
if (stringr::str_starts(var2show, "cum")) {
prettyCheckbox(inputId = ns("Log"), label = "Logarithmic scale", value = FALSE)
}
})
output$uiplt <- renderUI(
tagList(
conditionalPanel("!input.regression",
plotlyOutput(ns("plt")),
ns = ns
),
conditionalPanel("input.regression",
flowLayout(
numericInput(ns("upper"), "Number of days to be forecasted", min = 1, max = 100, value = 60),
numericInput(ns("step"), "Step of the x axis", min = 1, max = 50, value = 10),
prettyCheckbox(ns("conf"), "Add 95% confidence interval", value = FALSE),
radioGroupButtons(ns("modell"), choices = list(
"Logistic" = TRUE,
"Gompertz" = FALSE
), selected = TRUE)
),
plotlyOutput(ns("regplt")),
ns = ns
)
)
)
output$plt <- renderPlotly({
new_data1() %>%
select(DateRep, var2show, Countries) %>%
mutate(Countries = factor(Countries, labels = unique(Countries))) %>%
plot_ly(
x = ~DateRep, y = ~ get(var2show), color = ~Countries,
colors = "Dark2", no.white = TRUE, steps = 2, customdata = ~Countries, source = source
) %>%
add_lines(marker = list(size = 6)) %>%
layout(yaxis = list(title = f_labels(var2show), type = ifelse(input$Log, "log", "linear")), xaxis = list(title = "Date reported"))
})
new_data2 <- reactiveVal()
observeEvent(event_data("plotly_click", source = source), {
df <- data %>%
filter(Countries %in% event_data("plotly_click", source = source)$customdata)
new_data2(df)
})
output$pl <- renderUI(
ui_Country_property(ns("f_1"))
)
observeEvent(event_data("plotly_click", source = source), callModule(server_Country_property, "f_1", new_data2, var2show, showLABEL = showLABEL, Log = input$Log))
#-----------------------
# regression:
#-----------------------
output$regression2show <- renderUI({
if (stringr::str_starts(var2show, "cum") && showLog) {
prettyCheckbox(
ns("regression"),
label = div(
style = "font-size: 16px;color:purple;font-weight:bold",
"Prediction of the future"
),
value = FALSE
)
}
})
output$regplt <- renderPlotly({
LGM_plot(data = data, Region_name = country(), upper = input$upper, conf = input$conf, Step = input$step, Log = input$Log, modell = input$modell)
# LGM(new_data1()$cum_cases, new_data1()$DateRep, unique(new_data1()$Countries), upper = input$upper, conf = input$conf, Step = input$step,Log = input$Log)
})
}
runApp('C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project/COVID-19-dashboard')
setwd("C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/New folder (2)/Data-Visualization-Covid-19")
runApp()
install.packages("rgeos_0.6-4.tar.gz")
install.packages("rgeos_0.6-4.tar.gz", repos = NULL, type = "source")
