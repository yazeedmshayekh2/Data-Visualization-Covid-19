if (stringr::str_starts(var2show, "cum")) {
prettyCheckbox(inputId = ns("Log"), label = "Logarithmic scale", value = FALSE)
}
})
output$uiplt <- renderUI(
tagList(
conditionalPanel("!input.regression",
plotlyOutput(ns("plt")),
ns = ns
),
conditionalPanel("input.regression",
flowLayout(
numericInput(ns("upper"), "Number of days to be forecasted", min = 1, max = 100, value = 60),
numericInput(ns("step"), "Step of the x axis", min = 1, max = 50, value = 10),
prettyCheckbox(ns("conf"), "Add 95% confidence interval", value = FALSE),
radioGroupButtons(ns("modell"), choices = list(
"Logistic" = TRUE,
"Gompertz" = FALSE
), selected = TRUE)
),
plotlyOutput(ns("regplt")),
ns = ns
)
)
)
output$plt <- renderPlotly({
new_data1() %>%
select(DateRep, var2show, Countries) %>%
mutate(Countries = factor(Countries, labels = unique(Countries))) %>%
plot_ly(
x = ~DateRep, y = ~ get(var2show), color = ~Countries,
colors = "Dark2", no.white = TRUE, steps = 2, customdata = ~Countries, source = source
) %>%
add_lines(marker = list(size = 6)) %>%
layout(yaxis = list(title = f_labels(var2show), type = ifelse(input$Log, "log", "linear")), xaxis = list(title = "Date reported"))
})
new_data2 <- reactiveVal()
observeEvent(event_data("plotly_click", source = source), {
df <- data %>%
filter(Countries %in% event_data("plotly_click", source = source)$customdata)
new_data2(df)
})
output$pl <- renderUI(
ui_Country_property(ns("f_1"))
)
observeEvent(event_data("plotly_click", source = source), callModule(server_Country_property, "f_1", new_data2, var2show, showLABEL = showLABEL, Log = input$Log))
#-----------------------
# regression:
#-----------------------
output$regression2show <- renderUI({
if (stringr::str_starts(var2show, "cum") && showLog) {
prettyCheckbox(
ns("regression"),
label = div(
style = "font-size: 16px;color:purple;font-weight:bold",
"Prediction of the future"
),
value = FALSE
)
}
})
output$regplt <- renderPlotly({
LGM_plot(data = data, Region_name = country(), upper = input$upper, conf = input$conf, Step = input$step, Log = input$Log, modell = input$modell)
# LGM(new_data1()$cum_cases, new_data1()$DateRep, unique(new_data1()$Countries), upper = input$upper, conf = input$conf, Step = input$step,Log = input$Log)
})
}
runApp('C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project/COVID-19-dashboard/Modules/timeSeriesPlotPage.R')
library(ape)
library(ggplot2)
library(plotly)
source("Modules/weight_matrices.R")
library(ape)
library(ggplot2)
library(plotly)
source("Modules/weight_matrices.R")
# South_America <- c(
#   "Brazil", "Colombia", "Argentina",  "Peru",
#   "Venezuela", "Chile", "Ecuador", "Bolivia",
#   "Paraguay", "Uruguay", "Guyana",
#   "Suriname"
# )
# continent <- fread("Modules/countryContinent.csv")
# continent[["continent"]][continent[["country"]] %in% South_America] <-
#  "South_America"
# continent[["continent"]][continent[["continent"]] == "Americas"] <- "North_America"
# fwrite(continent, "Modules/countryContinent.csv")
#------Adjacency-----------
adjucent_Country_data <- function() {
nickName <- readLines("Modules/nickName.txt")
nickName <- do.call(rbind, strsplit(nickName, "\t"))
colnames(nickName) <- c("nick", "Name")
xname <- list(
nickName,
c("BL", "Saint Barthelemy"),
c("BQ", "Caribbiean Netherlands"),
c("CW", "Kingdom of the Netherlands"),
c("EH", "Western Sahara"),
c("GS", "South Georgia"),
c("KP", "North Korea"),
c("MF", "Saint Martin"),
c("SS", "South Sudan"),
c("SX", "Sint Marten"),
c("TL", "East Timor"),
c("XK", "Kosovo")
)
nickName <- do.call(rbind, xname)
#-------------------------------------------------------------------
a <- jsonlite::read_json("Modules/neighbors.json")
na <- names(a)
f <- function(x) {
as.integer(na %in% x)
}
res_mat <- f(a$AD$neighbours)
for (i in 2:length(a)) {
res_mat <- rbind(res_mat, f(a[[i]][[2]]))
}
diag(res_mat) <- 1
fName_func <- function(x) {
val <- which(x == nickName[, 1])
ifelse(length(val) == 0, NA, nickName[val, 2])
}
na2 <- mapply(fName_func, na)
na2 <- f_Country_wrangling(na2)
dimnames(res_mat) <- list(na2, na2)
return(res_mat)
}
adjucent_Continent_data <- function(x) {
continent <- fread("Modules/countryContinent.csv")
continent <- continent[, c("country", "continent")]
continent$country <- f_Country_wrangling(continent$country)
f <- function(y) {
y[y %in% rownames(x)]
}
tx <- tapply(continent$country, continent$continent, f)
# tx[[1]]<- NULL
resList <- vector("list", length(tx))
names(resList) <- names(tx)
for (i in seq_along(tx)) {
resList[[i]] <- x[tx[[i]], tx[[i]]]
}
resList
}
#------Distance-----------
library(maps)
library(rworldmap)
library(rworldxtra)
library(stringr)
f_dist_Countries <- function() {
world2 <- read.csv("Modules/country_data.csv")
world2 <- world2[-1]
world2$name <- f_Country_wrangling(as.character(world2$name))
#----------------------
# Computing distance
#----------------------
f <- function(x, y) {
# long <- world2$longitude
rad <- pi / 180
R <- 6371 # earth radius in km.
d_lat <- (x - world2$latitude) * rad
# print(d_lat)
d_long <- (y - world2$longitude) * rad
#
x <- x * rad
lat <- world2$latitude * rad
#
a <- sin(d_lat / 2)^2 + cos(x) * cos(lat) * sin(d_long / 2)^2
C <- 2 * atan2(sqrt(a), sqrt(1 - a))
# print(C)
R * C
}
dis <- purrr::map2(world2$latitude, world2$longitude, f)
res_mat <- matrix(unlist(dis), ncol = length(dis))
dimnames(res_mat) <- list(world2$name, world2$name)
return(res_mat)
}
library(ape)
library(ggplot2)
library(plotly)
source("Modules/weight_matrices.R")
library(ape)
library(ggplot2)
library(plotly)
source("weight_matrices.R")
Sub_data <- filter(
data[c("DateRep", "Countries", "Cases")], Countries %in% I
)
library(ape)
library(ggplot2)
library(plotly)
source("Modules/weight_matrices.R")
setwd("C:/Users/ADMIN/OneDrive - University Of Jordan/Desktop/Data Visualization Project/COVID-19-dashboard")
library(ape)
library(ggplot2)
library(plotly)
source("Modules/weight_matrices.R")
Moran_Index <- function(
Adj_mat, # Adjacenct matrix
Dis_mat, # Distance matrix
data,
Threshold = 0.5 # in (0, 1)
) {
I <- rownames(Dis_mat)[rownames(Dis_mat) %in% rownames(Adj_mat)]
Dis_mat <- Dis_mat[I, I]
Adj_mat <- Adj_mat[I, I]
Sub_data <- filter(
data[c("DateRep", "Countries", "Cases")], Countries %in% I
)
from <- which(Sub_data$DateRep == "2020-03-15")[1]
Sub_data <- Sub_data[from:nrow(Sub_data), ]
Sub_data[["DateRep"]] <- as.vector(Sub_data[["DateRep"]])
slct <- I %in% Sub_data$Countries
Adj_mat <- Adj_mat[slct, slct]
Dis_mat <- Dis_mat[slct, slct]
lambda <- quantile(Dis_mat[lower.tri(Dis_mat)], Threshold)
alpha <- 1
DIS_mat <- matrix(0, ncol(Dis_mat), ncol(Dis_mat))
DIS_mat <- (1 / Dis_mat)^alpha * (Dis_mat <= lambda)
diag(DIS_mat) <- 0
report0 <- by(
Sub_data, Sub_data["DateRep"],
function(x) try(Moran.I(x$Cases, weight = Adj_mat))
)
report1 <- report0[!sapply(report0, is.null)]
report <- sapply(
do.call(rbind.data.frame, report1),
function(x) as.double(as.character(x))
)
report0_D <- by(
Sub_data, Sub_data["DateRep"],
function(x) try(Moran.I(x$Cases, weight = DIS_mat))
)
report1_D <- report0_D[!sapply(report0_D, is.null)]
report_D <- sapply(
do.call(rbind.data.frame, report1_D),
function(x) as.double(as.character(x))
)
#------------overall
overall <- rbind.data.frame(report, report_D)
rownames(overall) <- NULL
overall$"Date Reported" <- rep(names(report1), 2)
names(overall) <- c("Observed", "Expected", "SD", "p_value", "Date Reported")
overall <- overall[c("Date Reported", "Observed", "Expected", "SD", "p_value")]
overall$Weight <- gl(2, nrow(report), labels = c(
"Measurement by adjacency",
"Measurement by geographical distance"
))
Date <- rep(1:(nrow(overall) / 2), 2)
at <- seq(1, nrow(overall) / 2, by = 5)
p <- ggplot(data = overall, aes(x = Date, y = p_value)) +
geom_point(color = "purple") +
geom_line() +
geom_abline(intercept = 0.05, slope = 0, linetype = "dotted") +
facet_wrap(~Weight, nrow = 2, scales = "free_y") +
theme_bw() +
theme(
axis.text = element_text(angle = 40, hjust = 0.9, size = 10),
panel.background = element_rect(fill = "gray97"),
plot.margin = margin(.1, .1, .1, .1, "cm"),
plot.background = element_rect(
fill = "grey94",
colour = "black",
size = 1
),
strip.text.x = element_text(
size = 10, color = "blue", face = "bold"
),
title = element_text(size = 10, face = "italic", vjust = 0.1, margin = unit(0.2, "cm"))
) +
scale_y_continuous(expand = c(0.3, 0), name = "") +
scale_x_continuous(name = "", breaks = at, labels = overall$"Date Reported"[at]) +
labs(title = "The corresponding p-values of Moran's test over the time")
p <- ggplotly(p) %>%
layout(
xaxis = list(
title = "Date reported",
titlefont = list(size = 13),
tickvals = at, ticktext = overall$"Date Reported"[at],
automargin = T
)
)
q <- ggplot(data = overall, aes(x = Date, y = Observed - Expected)) +
geom_point(color = "purple") +
geom_line() +
geom_abline(intercept = 0, slope = 0, linetype = "dotted") +
facet_wrap(~Weight, nrow = 2, scales = "free_y") +
theme_bw() +
theme(
axis.text = element_text(angle = 40, hjust = 0.9, size = 10),
panel.background = element_rect(fill = "gray97"),
plot.margin = margin(.1, .1, .1, .1, "cm"),
plot.background = element_rect(
fill = "grey94",
colour = "black",
size = 1
),
strip.text.x = element_text(
size = 10, color = "blue", face = "bold"
),
title = element_text(size = 10, face = "italic", vjust = 0.1, margin = unit(0.2, "cm"))
) +
scale_y_continuous(expand = c(0.3, 0), name = "") +
scale_x_continuous(name = "", breaks = at, labels = overall$"Date Reported"[at]) +
labs(title = "Differences of observed and expected values of Moran's Index over the time")
q <- ggplotly(q) %>%
layout(
xaxis = list(
title = "Date reported",
titlefont = list(size = 13),
tickvals = at, ticktext = overall$"Date Reported"[at],
automargin = T
)
)
overall[-c(1, 6)] <- round(overall[-c(1, 6)], 3)
overall$p_value <- ifelse(overall$p_value < 1e-3, "< 1e-3", overall$p_value)
return(list(tbl = overall, plt1 = p, plt2 = q))
}
# South_America <- c(
#   "Brazil", "Colombia", "Argentina",  "Peru",
#   "Venezuela", "Chile", "Ecuador", "Bolivia",
#   "Paraguay", "Uruguay", "Guyana",
#   "Suriname"
# )
# continent <- fread("Modules/countryContinent.csv")
# continent[["continent"]][continent[["country"]] %in% South_America] <-
#  "South_America"
# continent[["continent"]][continent[["continent"]] == "Americas"] <- "North_America"
# fwrite(continent, "Modules/countryContinent.csv")
#------Adjacency-----------
adjucent_Country_data <- function() {
nickName <- readLines("Modules/nickName.txt")
nickName <- do.call(rbind, strsplit(nickName, "\t"))
colnames(nickName) <- c("nick", "Name")
xname <- list(
nickName,
c("BL", "Saint Barthelemy"),
c("BQ", "Caribbiean Netherlands"),
c("CW", "Kingdom of the Netherlands"),
c("EH", "Western Sahara"),
c("GS", "South Georgia"),
c("KP", "North Korea"),
c("MF", "Saint Martin"),
c("SS", "South Sudan"),
c("SX", "Sint Marten"),
c("TL", "East Timor"),
c("XK", "Kosovo")
)
nickName <- do.call(rbind, xname)
#-------------------------------------------------------------------
a <- jsonlite::read_json("Modules/neighbors.json")
na <- names(a)
f <- function(x) {
as.integer(na %in% x)
}
res_mat <- f(a$AD$neighbours)
for (i in 2:length(a)) {
res_mat <- rbind(res_mat, f(a[[i]][[2]]))
}
diag(res_mat) <- 1
fName_func <- function(x) {
val <- which(x == nickName[, 1])
ifelse(length(val) == 0, NA, nickName[val, 2])
}
na2 <- mapply(fName_func, na)
na2 <- f_Country_wrangling(na2)
dimnames(res_mat) <- list(na2, na2)
return(res_mat)
}
adjucent_Continent_data <- function(x) {
continent <- fread("Modules/countryContinent.csv")
continent <- continent[, c("country", "continent")]
continent$country <- f_Country_wrangling(continent$country)
f <- function(y) {
y[y %in% rownames(x)]
}
tx <- tapply(continent$country, continent$continent, f)
# tx[[1]]<- NULL
resList <- vector("list", length(tx))
names(resList) <- names(tx)
for (i in seq_along(tx)) {
resList[[i]] <- x[tx[[i]], tx[[i]]]
}
resList
}
#------Distance-----------
library(maps)
library(rworldmap)
library(rworldxtra)
library(stringr)
f_dist_Countries <- function() {
world2 <- read.csv("Modules/country_data.csv")
world2 <- world2[-1]
world2$name <- f_Country_wrangling(as.character(world2$name))
#----------------------
# Computing distance
#----------------------
f <- function(x, y) {
# long <- world2$longitude
rad <- pi / 180
R <- 6371 # earth radius in km.
d_lat <- (x - world2$latitude) * rad
# print(d_lat)
d_long <- (y - world2$longitude) * rad
#
x <- x * rad
lat <- world2$latitude * rad
#
a <- sin(d_lat / 2)^2 + cos(x) * cos(lat) * sin(d_long / 2)^2
C <- 2 * atan2(sqrt(a), sqrt(1 - a))
# print(C)
R * C
}
dis <- purrr::map2(world2$latitude, world2$longitude, f)
res_mat <- matrix(unlist(dis), ncol = length(dis))
dimnames(res_mat) <- list(world2$name, world2$name)
return(res_mat)
}
# Moran Modulde.
library(shiny)
library(shinyWidgets)
ui_moran <- function(id) {
ns <- NS(id)
tagList(
radioGroupButtons(ns("contin"),
choiceNames = c("Africa", "Asia", "Europe", "North America", "Oceania", "South America"),
choiceValues = c("Africa", "Asia", "Europe", "North_America", "Oceania", "South_America"), ,
selected = "Africa", status = "info",
checkIcon = list(
yes = tags$i(
class = "fa fa-circle",
style = "color: steelblue"
),
no = tags$i(
class = "fa fa-circle-o",
style = "color: steelblue"
)
)
),
tags$div(sliderInput(ns("threshold"),
label = "Threshold for geographical distance",
min = 0, max = 1, step = 0.05, value = .5, animate = FALSE
),
width = "20px"
),
tabsetPanel(
tabPanel(
"Charts",
box(
title = "The p-value of Moran's test", width = 22, status = "warning", solidHeader = TRUE,
withSpinner(plotlyOutput(ns("plt1")))
),
box(
title = "Difference of observed and expected values of Moran's Index", width = 22, status = "warning", solidHeader = TRUE,
plotlyOutput(ns("plt2"))
)
),
tabPanel(
"Data Table",
dataTableOutput(ns("tbl")),
downloadButton(ns("down_csv"), label = "  .csv", width = "100px"),
downloadButton(ns("down_json"), label = "  .json", width = "100px")
)
)
)
}
server_moran <- function(input, output, session, data) {
adjacency <- adjucent_Continent_data(adjucent_Country_data())[-1]
distance <- adjucent_Continent_data(f_dist_Countries())[-1]
Adj_mat <- reactive(adjacency[[input$contin]])
Dis_mat <- reactive(distance[[input$contin]])
M <- reactive(Moran_Index(
Adj_mat = Adj_mat(), Dis_mat = Dis_mat(),
data = data, Threshold = input$threshold
))
output$plt1 <- renderPlotly(
M()$plt1
)
output$plt2 <- renderPlotly(
M()$plt2
)
output$tbl <- renderDataTable(
datatable(M()$tbl)
)
output$down_csv <- downloadHandler(
filename = function() {
paste0("data", ".csv", sep = "")
},
content = function(file) {
data.table::fwrite(M()$tbl, file)
}
)
output$down_json <- downloadHandler(
filename = function() {
paste0("data", ".json", sep = "")
},
content = function(file) {
jsonlite::write_json(M()$tbl, file)
}
)
}
runApp('Modules/leafletMap_Page.R')
runApp()
runApp()
install.packages('shinydashboard')
install.packages('shinydashboardPlus')
install.packages("shinydashboardPlus")
install.packages("shinydashboard")
install.packages("shinydashboard")
runApp()
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
runApp()
runApp('Modules/leafletMap_Page.R')
